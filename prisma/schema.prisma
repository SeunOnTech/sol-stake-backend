// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

model Validator {
  id              String    @id @default(cuid())
  voteAccount     String    @unique
  name            String?
  validatorPubkey String    @unique
  commission      Float?
  uptime          Float
  trustScores     TrustScore[]
  stakeAccounts   StakeAccount[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([validatorPubkey])
}

model TrustScore {
  id           String     @id @default(cuid())
  validatorId  String
  score        Float
  scoringRunId String
  createdAt    DateTime   @default(now())

  validator    Validator  @relation(fields: [validatorId], references: [id])
  scoringRun   ScoringRun @relation(fields: [scoringRunId], references: [id])
}

model ScoringRun {
  id             String       @id @default(cuid())
  runDate        DateTime     @default(now())
  status         String       @default("completed") // "running", "completed", "failed"
  validatorCount Int          @default(0)
  successCount   Int          @default(0)
  failCount      Int          @default(0)
  createdAt      DateTime     @default(now())
  trustScores    TrustScore[]
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  actorId   String?
  metadata  Json
  createdAt DateTime @default(now())
}

model User {
  id           String        @id @default(cuid())
  walletPubkey String        @unique
  stakeAccounts StakeAccount[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([walletPubkey])
}

model StakeAccount {
  id            String     @id @default(cuid())
  walletPubkey  String
  validatorId   String
  stakedAmount  Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  validator     Validator  @relation(fields: [validatorId], references: [id])
  user          User?      @relation(fields: [walletPubkey], references: [walletPubkey])

  @@index([walletPubkey])
}

